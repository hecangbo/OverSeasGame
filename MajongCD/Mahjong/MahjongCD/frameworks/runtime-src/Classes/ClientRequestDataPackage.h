#ifndef  _CLIENT_REQUEST_DATAPACKAGE_H
#define _CLIENT_REQUEST_DATAPACKAGE_H
#include "stdint.h"
#include "DataType.h"


//数据加密解密处理
#define MAX_S_BUFF_LEN		    8192
#define MAX_S_RECV_BUF_LEN	8*1024+128
typedef unsigned short WORD;
typedef unsigned char  BYTE;
//#define FALSE            0
//#define TRUE             1

#pragma pack(push)
#pragma pack(1)


static unsigned  long  CRC_32_tab[256]= {     
	0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,     
	0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,     
	0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,     
	0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,     
	0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,     
	0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,     
	0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,     
	0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,     
	0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,     
	0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,     
	0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,     
	0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,     
	0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,     
	0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,     
	0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,     
	0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,     
	0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,     
	0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,     
	0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,     
	0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,     
	0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,     
	0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,     
	0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,     
	0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,     
	0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,     
	0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,     
	0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,     
	0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,     
	0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,     
	0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,     
	0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,     
	0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d     
};  
static BYTE ByteMap[256] = 
{
	0x73,0x2F,0x30,0x52,0x48,0x8E,0x6C,0x42,0x7D,0xAB,0x1C,0x1F,0x74,0xAC,0x2D,0x61,
	0x0D,0x37,0x9B,0x0B,0xD4,0xC4,0x39,0x74,0xBF,0x2A,0x1C,0x14,0x06,0xE3,0x04,0x36,
	0x1D,0x5C,0x3B,0xB2,0x68,0x63,0xFC,0xA2,0xD8,0x65,0xD1,0xB5,0x52,0x07,0xF5,0x13,
	0xF2,0x23,0x6B,0x4A,0x20,0x59,0x89,0x64,0xD7,0xA2,0xCA,0x8E,0x3D,0x3A,0x77,0x60,
	0x81,0x27,0x38,0xC2,0x8C,0x08,0xFC,0x88,0xD8,0x29,0x16,0x5B,0x2C,0x53,0x57,0x41,
	0xE8,0x01,0x1A,0xCE,0x86,0x83,0xB0,0x22,0x28,0x8A,0x3F,0x26,0x46,0x43,0x6F,0x26,
	0x74,0x3A,0x31,0x82,0x97,0x95,0x4C,0x88,0xD5,0xE3,0xC1,0xBF,0x52,0x10,0xA5,0x82,
	0xC6,0xD1,0xFF,0xFC,0xE4,0xCF,0xB8,0x89,0x58,0xCA,0x9C,0x34,0xF9,0x37,0x9F,0x6A,
	0x8A,0xF8,0x35,0x02,0x3C,0xD3,0xA7,0x86,0x2D,0xFB,0xCE,0x4B,0x2B,0xEF,0x57,0x7F,
	0x93,0xA1,0x69,0x0C,0x71,0x31,0xDE,0x21,0x75,0xA8,0xAA,0xBA,0x7C,0x33,0x02,0xB6,
	0x8D,0x01,0x3D,0xE2,0x6D,0xCC,0xC7,0xB7,0x8B,0x7A,0x2A,0xBD,0x62,0xBE,0x55,0x33,
	0x03,0xD1,0x88,0xB2,0x5E,0x4E,0xB9,0xE8,0xC2,0xA7,0xCB,0x7D,0xC9,0x32,0xC3,0xA6,
	0xDA,0xA7,0x30,0xB2,0x4B,0x94,0xC7,0x98,0x85,0x11,0x3B,0x7B,0x29,0xB1,0x5D,0x19,
	0xE1,0xA2,0x1C,0xB6,0x32,0x99,0xA3,0x76,0x9E,0x7A,0x6D,0x9A,0x30,0xD6,0xA9,0x2A,
	0xC7,0xAE,0x36,0x32,0x20,0xBB,0xD7,0xC9,0xD2,0x08,0xF1,0xB1,0x72,0xF4,0x45,0x2D,
	0x93,0xC1,0xE2,0x28,0x11,0x18,0x52,0xFE,0xDF,0xA8,0xA8,0x54,0xBC,0xB0,0x33,0xDF
};
static BYTE ByteMap2[256] =	
{
	0x23,0xA7,0x8E,0xB2,0x3E,0x63,0x8C,0x1D,0xD9,0x37,0x4D,0x23,0xA3,0x30,0x49,0xF0,
	0x1D,0xCA,0x21,0x27,0x1A,0x72,0x4A,0x3D,0xF6,0xCD,0x53,0xA9,0xD4,0xA5,0xB7,0x3B,
	0x39,0x99,0x27,0x39,0x44,0xAF,0x1B,0x91,0xA8,0x19,0xBA,0xCF,0xDA,0xEF,0xF8,0x01,
	0x1C,0x25,0x34,0x4F,0x5B,0x63,0x71,0x8E,0x9D,0x16,0xA1,0xBC,0xC4,0xDC,0x2F,0xFA,
	0xC2,0x4F,0x39,0xFE,0x04,0x07,0x5C,0x8B,0xEE,0x66,0x33,0xC4,0xC8,0x59,0xB5,0x3D,
	0xD2,0x6C,0xF6,0x4D,0xFB,0xAE,0x4A,0x4B,0xF3,0x35,0x4C,0xCA,0x21,0x78,0x3B,0x03,
	0xAD,0x24,0xBD,0x25,0x37,0x29,0xAC,0x4F,0x19,0x92,0x3A,0xD2,0x4C,0xDA,0x06,0x5E,
	0x30,0x94,0x60,0xEC,0x17,0x98,0xD7,0x3E,0xCB,0x3A,0x39,0xD9,0x9C,0xBB,0x08,0x8F,
	0x50,0xA0,0x6F,0x55,0x67,0x87,0x54,0x80,0xB2,0x36,0x47,0x42,0x44,0x63,0x05,0x6B,
	0xC0,0x0F,0xC7,0x90,0xC5,0x65,0xB2,0x64,0xCA,0xD5,0xDB,0x12,0x7A,0x2E,0xD8,0x7E,
	0x19,0xD1,0xE8,0xD6,0x86,0x27,0xBF,0xC1,0x6E,0xDE,0x9A,0x09,0x0D,0xAB,0xE1,0x91,
	0x36,0xCD,0xB3,0x76,0x0C,0xC3,0xD3,0x9F,0x42,0xB6,0x9B,0xE5,0x53,0xA7,0xAD,0x58,
	0x76,0xF4,0xB9,0xBE,0x17,0x43,0x80,0xE0,0xA7,0xBC,0xF1,0xBA,0xA5,0xA6,0x53,0x75,
	0x94,0xEB,0xE6,0x85,0x14,0x48,0xDD,0x18,0x3A,0xCC,0x7F,0xB1,0xC0,0xA1,0x96,0xF8,
	0x1F,0x28,0xF2,0x69,0x74,0x68,0xB7,0xA3,0x50,0xD0,0x79,0x1D,0xFC,0xCE,0x1A,0x9D,
	0xAE,0x62,0x30,0x6A,0x2D,0xDB,0x2E,0xBA,0x11,0x7D,0x46,0x89,0x73,0xA2,0xF1,0x82
};
static BYTE iSbox[256]=
{
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

struct tagPackHeader
{
	WORD wDataLength;			//数据长度
	WORD wPackType;				//包类型，0为普通包，其他由应用层自行定义
	BYTE bRandFlag;			    //随机标志，发送方自动生成，接收方必须用到发送方随机标志才能够解开
	unsigned long ulCRCCode;	//CRC校验码，发送方生成，接收方也会生成一个，不等数据会接收失败。
	ULONGLONG uuReceiver;		//接收者标记
	//加密发送数据包，生成随机标志bRandFlag 和CRC校验码 ulCRCCode，发送自定义key bRandKey
	//InOutText - 加密输入输出数据
	//wLen - 数据长度
	//bFlag - 生成的随机标志
	//bRandKey - 自定义key
	//成功返回的是CRC码，失败返回0
	unsigned long EnCrypt(BYTE * InOutText,WORD wLen,BYTE & bFlag,BYTE * bRandKey=NULL);
	//解密数据包，要用收到的数据包的随机标志bRandFlag 和CRC校验码 和发送自定义key bRandKey才能够解开
	//InOutText - 加密输入输出数据
	//wLen - 数据长度
	//bRandKey - 自定义key
	bool DecCrypt(BYTE * InOutText,WORD wLen,BYTE * bRandKey=NULL );
	//发送数据包生成 
	//szDataBuf - 前面9个字节固定为包头位置，第10个字节内容为数据，输出时为一个完成的发送数据包
	//wLen - 传入发送数据长度，传出加上包头的数据长度
	//bSkey - 自定义Key,用于加密，接收方必须要同意的子定义Key才能够解开这个包
	//wPType- 保留参数，定义包类型，默认为0
	unsigned long GenerateSendPack(char  * szDataBuf,WORD &wLen,BYTE *bSkey=NULL,WORD wPType = 0);
	//校验解析数据
	//szDataBuf -  输入带包头加密数据，输出去包头数据
	//wLen - 输入带包头数据长度，输出去包头数据长度
	//bSkey - 使用GenerateSendPack函数一样的自定义Key
	//返回TRUE，szDataBuf就是解析得到到的数据
	bool CheckCRC32(char  * szDataBuf,WORD &wLen,WORD &wType,BYTE *bSkey=NULL);
};


#pragma pack(pop)

#endif